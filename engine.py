from operator import mod
import gspread
import iphone_db
import os

path = os.path.join(os.path.dirname(__file__), os.path.pardir, 'GoogleAPI\mypython-351009-5d090fd9b043.json')

sa = gspread.service_account(filename=path)

sh = sa.open('Test') #–≤—ñ–¥–∫—Ä–∏–≤–∞—î —Ñ–∞–π–ª —Ç–∞–±–ª–∏—Ü—ñ

#–§—É–Ω–∫—Ü—ñ—è —è–∫–∞ –æ–ø–∏—Å—É—î —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∑—è–≤ —â–æ—Å—å
def get_thing(model, model_begin, value, workseet, sheet, *args):
    if args:
        if 'se' in model.lower():
            model = model[1:]
        apple = iphone_db.artic(model_begin)
        color_mode = args[0].replace(' ', '')
        model_pat = apple + model + color_mode
        model_pat = model_pat.lower().replace(' ', '') #iphone8spacegray
        for i, row in enumerate(workseet.get_all_values()):
            if model.lower() in row[0].lower().replace(' ', ''):
                row_res = row[0].lower().replace(' ', '')
                row_res = row_res[:-len(color_mode)]
                row_res = list(map(lambda x: apple + x.replace(' ', '') + color_mode.lower(), row_res[len(apple):].split('/')))
                if  model_pat in row_res:
                    thing_value = int(row[1])
                    if thing_value == 0:
                        return f'üî¥ {sheet} –Ω–∞ {apple} {model} {color_mode} - –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å! üî¥'
                    else:
                        value = int(value)
                        workseet.update_cell(i + 1, 2, thing_value - value)
                        return f'–í–∑—è–≤ {sheet.lower()} –Ω–∞ {apple} {model} {args[0].lower()} - {value} —à—Ç.\nüîµ –ó–∞–ª–∏—à–∏–ª–æ—Å—å {thing_value - value} —à—Ç! üîµ'
    else:
        if 'se' in model.lower():
            model = model[1:]
        apple = iphone_db.artic(model_begin)
        model_pat = apple + model.lower()    
        for i, row in enumerate(workseet.get_all_values()):
            row_res = row[0].lower().replace(' ', '')
            row_res = list(map(lambda x: apple + x.replace(' ', ''), row_res[len(apple):].split('/')))
            if  model_pat in row_res:
                thing_value = int(row[1])
                if thing_value == 0:
                    return f'üî¥ {sheet} –Ω–∞ {apple} {model} - –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å! üî¥'
                else:
                    value = int(value)
                    workseet.update_cell(i + 1, 2, thing_value - value)
                    return f'–í–∑—è–≤ {sheet.lower()} –Ω–∞ iPhone {model} - {value} —à—Ç.\nüîµ –ó–∞–ª–∏—à–∏–ª–æ—Å—å {thing_value - value} —à—Ç! üîµ'


#–û—Ç—Ä–∏–º—É—î—î –≤—Å–µ —â–æ –∑–∞–∫—ñ–Ω—á–∏–ª–æ—Å—å
def get_cover_null():
    sheets = iphone_db.all_sheets()
    string_of_null_list = ''
    string_of_null = '\U0000274C –í—Å–µ —â–æ –∑–∫—ñ–Ω—á–∏–ª–æ—Å—å \U0000274C' + '\n'

    for wks in sheets:
        wk = sh.worksheet(wks[0])
        string_of_null += wks[0] + ':' + '\n'
        for row in wk.get_all_values():
            if row[1] == '0':
                string_of_null_list += '- ' + row[0] + ' ' + row[1] + '\n'
        if string_of_null_list:
            string_of_null += string_of_null_list
        else:
            string_of_null += '–í—Å–µ —î!' + '\n'
        string_of_null_list = ''

    if string_of_null == '':
        return None
    else:  
        return string_of_null.rstrip()


#–ü–æ—à—É–∫ –≤—Å—å–æ–≥–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
def search_thing(wks, sheet):
    string_of_things = ''
    string_of_things += f'{sheet}\n'
    for num, row in enumerate(wks.get_all_values()):
        if num != 0:
            string_of_things += f'{num}. {row[0]} - {row[1]}\n'
  
    return string_of_things.rstrip()


def main(command):
    command = command.split('_')
    #['akb', 'take', '6', '6s', 'nocolor', '1']
    #[0] akb - –∑ —è–∫–æ–≥–æ –ª–∏—Å—Ç–∞
    #[1] take - —â–æ –∑—Ä–æ–±–∏—Ç–∏
    #[2] 6 - —Ü–µ –≥—Ä—É–ø–∞ –º–æ–¥–µ–ª–µ–π
    #[3] 6s - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –º–æ–¥–µ–ª—å
    #[4] nocolor - –∫–æ–ª—ñ—Ä\–±–µ–∑ –∫–æ–ª—å–æ—Ä—É
    #[5] 1 - –∫—ñ–ª—å–∫—ñ—Å—Ç—å

    sheet = iphone_db.ret_uk_request(command[0]) #–Ω–∞–∑–≤–∞ –ª–∏—Å—Ç–∞
    wks = sh.worksheet(sheet) #–≤–∏–±—Ä–∞–ª–∏ –ª–∏—Å—Ç

    if command[1] == 'take':
        model = command[3]
        value = command[5]
        color = command[4]
        model_begin = command[2]
        #–≤–∑—è—Ç–∏ —â–æ—Å—å
        if color == 'nocolor':
            result = get_thing(model, model_begin, value, wks, sheet)
        else:
            result = get_thing(model, model_begin, value, wks, sheet, color, command[0])
    else:
        result = search_thing(wks, sheet)

    return result

# print(main('cover_take_X_Xs_space gray_1'))
# print(main('akb_take_8_8se2020_nocolor_1'))
