import time
import gspread
import iphone_db
import os
import work_progress_db

path = os.path.join(os.path.dirname(__file__), os.path.pardir, 'GoogleAPI/mypython-351009-5d090fd9b043.json')

sa = gspread.service_account(filename=path)

sh = sa.open('inStyle_parts')
# sh = sa.open('Test_parts')


def gen_list_models_with_color(s, apple):
    ks = s.split(' ')[-1].lower()
    s = s.lower().replace(' ', '')[len(apple):-len(ks)]
    s = s.split('/')
    return list(map(lambda x: apple + x + ks, s))


def circle_color_choose(availability, min_value):
    yellow = 'üü°'
    blue = 'üî∑'
    red = '‚ùóÔ∏è'
    if availability == 0:
        return red
    elif int(availability) <= int(min_value):
        return yellow
    else:
        return blue


def remnant_part(thing_value, value, min_value):
    remnant = thing_value - value
    if thing_value - value == 0:
        return f'{circle_color_choose(remnant, min_value)} –ó–∞–ª–∏—à–∏–ª–æ—Å—å {thing_value - value} —à—Ç! {circle_color_choose(remnant, min_value)}'
    else:
        return f'{circle_color_choose(remnant, min_value)} –ó–∞–ª–∏—à–∏–ª–æ—Å—å {thing_value - value} —à—Ç! {circle_color_choose(remnant, min_value)}'


def get_thing_with_color(model, model_begin, value, workseet, sheet, *args):
    apple = iphone_db.artic(model_begin)
    color_mode = args[0].replace(' ', '')
    model_pat = apple + model + color_mode
    model_pat = model_pat.lower().replace(' ', '')
    for i, row in enumerate(workseet.get_all_values()):
        if model.lower() in row[0].lower().replace(' ', ''):
            row_res = gen_list_models_with_color(row[0], apple)
            if  model_pat in row_res:
                thing_value = int(row[1])
                value = int(value)
                if thing_value == 0:
                    return [f'{circle_color_choose(thing_value, row[3])} {sheet} –Ω–∞ {apple} {model} {color_mode} - –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å! {circle_color_choose(thing_value, row[3])}', True]
                elif value > thing_value:
                    return [f'–ù–µ –º–æ–∂–Ω–∞ –≤–∑—è—Ç–∏ –±—ñ–ª—å—à–µ –Ω—ñ–∂ —î. –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ {thing_value} –ø–æ—Ç—Ä—ñ–±–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å {value}', False]
                else:
                    workseet.update_cell(i + 1, 2, thing_value - value)
                    ost = remnant_part(thing_value, value, row[3])

                    return [f'–í–∑—è–≤ {sheet.lower()} –Ω–∞ {apple} {model} {args[0].lower()} - {value} —à—Ç.\n{ost}', True, [apple.lower(), model.lower(), sheet, value]]


def gen_list_wth_color(s, apple):
    s = s.lower().replace(' ', '')[len(apple):]
    s = s.split('/')
    return list(map(lambda x: apple + x, s))


def get_thing(model, model_begin, value, workseet, sheet):
    apple = iphone_db.artic(model_begin)
    model_pat = apple + model.lower()    
    for i, row in enumerate(workseet.get_all_values()):
        row_res = gen_list_wth_color(row[0], apple)
        if  model_pat in row_res:
            thing_value = int(row[1])
            value = int(value)
            if thing_value == 0:
                return [f'{circle_color_choose(thing_value, row[3])} {sheet} –Ω–∞ {apple} {model} - –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å! {circle_color_choose(thing_value, row[3])}', True]
            elif value > thing_value:
                return [f'–ù–µ –º–æ–∂–Ω–∞ –≤–∑—è—Ç–∏ –±—ñ–ª—å—à–µ –Ω—ñ–∂ —î. –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ {thing_value} –ø–æ—Ç—Ä—ñ–±–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å {value}', False]
            else:
                workseet.update_cell(i + 1, 2, thing_value - value)
                ost = remnant_part(thing_value, value, row[3])

                return [f'–í–∑—è–≤ {sheet.lower()} –Ω–∞ {apple} {model} - {value} —à—Ç.\n{ost}', True, [apple.lower(), model.lower(), sheet, value]]


def get_null_things():
    sheets = iphone_db.all_sheets()
    string_of_null_list = ''
    string_of_null = '\U0000274C –í—Å–µ —â–æ –∑–∫—ñ–Ω—á–∏–ª–æ—Å—å \U0000274C' + '\n'

    for wks in sheets:
        wk = sh.worksheet(wks[0])
        title = wks[0] + ':' + '\n'
        for row in wk.get_all_values():
            if row[1] == '0':
                string_of_null_list += '- ' + row[0] + ' ' + row[1] + '\n'
        if string_of_null_list:
            string_of_null += title + string_of_null_list
        string_of_null_list = ''

    if string_of_null == '':
        return None
    else:  
        return string_of_null.rstrip()


def five(num, max_num):
    s = max_num - num
    while s % 5 != 0:
        s += 1    
    return s


def sum_parts():
    sheets = iphone_db.all_sheets()
    sum_order = 0
    for wks in sheets:
        wk = sh.worksheet(wks[0])
        for number, row in enumerate(wk.get_all_values()):
            if number == 0 or row[5] == '':
                continue
            sum_order += int(row[1]) * float(row[5].replace(',', '.'))
    return sum_order


def list_ref_parts(*args):
    sheets = iphone_db.all_sheets()
    sum_order = 0
    list_of_ref = []
    string_of_ref = ''
    for wks in sheets:
        wk = sh.worksheet(wks[0])
        if wks[0] == '–î–æ–¥–∞—Ç–∫–æ–≤–∏–π':
            for row in wk.get_all_values():
                string_of_ref += row[0] + ' - ' + row[1] + '\n'
        else:
            for number, row in enumerate(wk.get_all_values()):
                if not row[4] or number == 0:
                    continue
                
                if args:
                    if int(row[1]) <= int(row[3]):

                        if wks[1] == 'five':
                            result = five(int(row[1]), int(row[2]))
                        else:
                            result = int(row[2]) - int(row[1])
                        string_of_ref += row[4] + ' - ' + str(result) + '\n'
                        sum_order += float(row[5].replace(',', '.')) * result
                else:
                    if int(row[1]) < int(row[2]):

                        if wks[1] == 'five':
                            result = five(int(row[1]), int(row[2]))
                        else:
                            result = int(row[2]) - int(row[1])
                        string_of_ref += row[4] + ' - ' + str(result) + '\n'
                        sum_order += float(row[5].replace(',', '.')) * result

                if len(string_of_ref) >= 4000:
                    list_of_ref.append(string_of_ref.rstrip())
                    string_of_ref = ''

    sum_order_string = f'–°—É–º–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è - {round(sum_order, 2)} $'

    if string_of_ref == '':
        return None
    elif len(string_of_ref) < 4000:
        list_of_ref.append(string_of_ref.rstrip())
        list_of_ref.append(sum_order_string)
        return list_of_ref
    else:
        list_of_ref.append(sum_order_string)  
        return list_of_ref


def list_copy_and_battery(part, emod):
    sheet = iphone_db.ret_uk_request(part)
    wk = sh.worksheet(sheet)
    list_order = f'{emod[0]}{sheet}: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ –º–∞–∫—Å–∏–º—É–º—É\n'
    num = 0
    for row in wk.get_all_values()[1:]:
        row_max = int(row[2])
        row_avail = int(row[1])
        if row_avail < row_max:
            num += 1
            list_order += f'{num}. {row[0]} - {row_max - row_avail}\n'
    return list_order.rstrip()


#–ü–æ—à—É–∫ –≤—Å—å–æ–≥–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
def search_thing(wks, sheet):
    string_of_things = ''
    string_of_things += f'{sheet}\n'
    for num, row in enumerate(wks.get_all_values()):
        if num != 0:
            string_of_things += f'{num}. {row[0]} - {row[1]}\n'
  
    return string_of_things.rstrip()


def add_to_list(string):
    workseet = sh.worksheet('–î–æ–¥–∞—Ç–∫–æ–≤–∏–π')
    string = string.split('\n')[1:]
    result_list = [f'{row[0]}*{row[1]}' for row in workseet.get_all_values()]
    result_list += string

    for i, value in enumerate(result_list):
        workseet.update_cell(i + 1, 1, value.split('*')[0])
        workseet.update_cell(i + 1, 2, value.split('*')[1])

    return string


def clean_worksheet():
    workseet = sh.worksheet('–î–æ–¥–∞—Ç–∫–æ–≤–∏–π')
    workseet.clear()


def main(command):
    command = command.split('_')

    sheet = iphone_db.ret_uk_request(command[0])
    wks = sh.worksheet(sheet)

    if command[1] == 'take':
        model = command[3]
        value = command[5]
        color = command[4]
        model_begin = command[2]
        if color == 'nocolor':
            result = get_thing(model, model_begin, value, wks, sheet)
        else:
            result = get_thing_with_color(model, model_begin, value, wks, sheet, color, command[0])
    else:
        result = search_thing(wks, sheet)

    return result

def main_time(time_b, bot, target):
    def time_mod(tm):
        time_b_list = tm.split(':')
        time_b_list = list(map(lambda x: int(x), time_b_list))
        result = (time_b_list[0] * 60) * 60 + time_b_list[1] * 60 + time_b_list[2]
        return result

    def sleep_time(start_time, end_time):
        result = end_time - start_time
        if result < 0:
            result = result * -1
            s_tome_min = (24 * 60) * 60
            result = s_tome_min - result
        return result

    def str_time_t():
        t = time.time()
        t = time.localtime(t)
        t = time.strftime('%H:%M:%S', t)
        return t

    t = str_time_t()

    while True:
        time_sleep = sleep_time(time_mod(t), time_mod(time_b))
        time.sleep(time_sleep)
        if target == 'null_time':
            bot.send_message(-674239373, get_null_things())
        elif target == 'reset_time':
            work_progress_db.reset_data_base()
        time.sleep(60)
        t = str_time_t()


def change_time_null(string):
    string = string.split('\n')[1:]
    iphone_db.change_time(string)
    

def open_read_me():
    text = """–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è —Å–∞–º–∏—Ö –º–∞–ª–µ–Ω—å–∫–∏—Ö!
–ü–µ—Ä–µ–¥ —Ç–æ–±–æ—é –º—ñ–π —é–Ω–∏–π –¥—Ä—É–∂–µ –¥–∏–≤–Ω–∏–π —Å–≤—ñ—Ç —Ä–µ–º–µ—Å–ª–∞ –ø—ñ–¥ –Ω–∞–∑–≤–æ—é WorkProgress.
–¢—É—Ç —Ç–∏ –±—É–¥–µ—à –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ —Å–≤–æ—ó –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è, –ø–æ–ª—É—á–∞—Ç–∏ –ø–ª—é—à–∫–∏ —ñ –±—É—Ç–∏ –∫—Ä–∞—Å–∞—É—á–µ–∫–æ–º)
–ó–∞—Ä–∞–∑ —è —Ç–æ–±—ñ –ø–æ—è—Å–Ω—é —è–∫ —Ü–µ –≤—Å–µ —Ç—Ä–µ–±–∞ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ —â–æ–± –§–ª–µ—Ä–∫–µ–Ω –Ω–µ –º–∞—Ç—é–∫–∞–≤—Å—è —ñ –≤—Å–µ –≤—ñ—Ä–Ω–æ —Ä–∞—Ö—É–≤–∞–≤.
–ù–∞–≥–∞–¥–∞—é, —â–æ –¥–∞–Ω–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Ä–æ–∑—Ä–æ–±–ª–µ–Ω–∞ —É –§–ª–µ—Ä–∫–µ–Ω—ñ —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ç–æ–≥–æ —â–æ–± –Ω—ñ—è–∫–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–∞–±—É–≤–∞–≤ —Å–≤–æ—ó –¥—ñ—ó —ñ —è–∫—â–æ —â–µ —Ç—Ä—ñ—à–∫–∏ –ø–æ—á–µ–∫–∞—Ç–∏ —Ç–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫ —Ü–µ—ó –±–∞–π–¥–∏ –∑–º–æ–∂–µ –Ω–∞–≤—á–∏—Ç–∏ —Ç–µ–±–µ –ø–æ–ø–∞–¥–∞—Ç–∏ –ª–æ–∂–∫–æ—é –≤ —Ä–æ—Ç –∑ –ø–µ—Ä—à–æ–≥–æ —Ä–∞–∑—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ü—å–æ–≥–æ –∂ –§–ª–µ—Ä–∫–µ–Ω–∞!
–û—Ç–∂–µ —â–æ —Ç—Ä–µ–±–∞ —Ä–æ–±–∏—Ç–∏?!
–ù–∞ –ø—Ä–æ—Ç—è–∑—ñ –¥–Ω—è —Ç–∏ –±–µ—Ä–µ—à —ñ–∑ –±–æ—Ç–∞ –≤—Å—è–∫—ñ –∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏. –í–æ–Ω–∏ –¥–µ—Å—å —Å–æ–±—ñ –∑–∞–ø–∏—Å—É—é—Ç—å—Å—è.
–í –∫—ñ–Ω—Ü—ñ –¥–Ω—è —Ç–∏ —Å–∫–∏–¥—É—î—à —Å–≤—ñ–π Work Progress(–¥–∞–ª—ñ WP –±–æ —ó–±–∞–≤ –ø–∏—Å–∞—Ç–∏ –∫–æ–∂–µ–Ω —Ä–∞–∑).
–í–æ–Ω–æ —Ü–µ –≤—Å–µ —Ä–∞—Ö—É—î —ñ –∫–∞–∂–µ "—â–æ —Å–∞–º–µ —ñ —Å–∫—ñ–ª—å–∫–∏ —Ç—Ä–µ–±–∞ –≤–∑—è—Ç–∏ –∑ –±–æ—Ç–∞ –¢–ê\–ê–ë–û –¥–æ–ø–∏—Å–∞—Ç–∏ —É WP.
–ú–æ–∂–Ω–∞ —Ä–æ–±–∏—Ç–∏ –ø–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —ñ –≤—ñ–¥—Ä–∞–∑—É –ø–∏—Å–∞—Ç–∏ —Ç–µ —â–æ —Ç—Ä–µ–±–∞ —É WP –∫–æ–ª–∏ —à–æ—Å—å –∑—Ä–æ–±–∏–≤ —á–∏ –≤–∏–¥–∞–≤.(–ê–ª–µ —è –∂ –∑–Ω–∞—é —â–æ —Ç–∞–∫–∏–π —à–ª—è—Ö –Ω–µ –¥–ª—è —Å–ø—Ä–∞–≤–∂–Ω—ñ—Ö —Å–∞–º—É—Ä–∞—ó–≤!!)
1. –ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ 
2. –ù–∞–∂–∏–º–∞—î—Ç–µ 'Other'.
3. –¢–∞–º —î –∫–Ω–æ–ø–∫–∞ 'WorkProgress'. (–ø—Ä–æ —ñ–Ω—à—ñ –∫–Ω–æ–ø–∫–∏ –ø—ñ–∑–Ω—ñ—à–µ –ø–æ—è—Å–Ω—é –∞–±–æ –ø–æ—è—Å–Ω—é —É—Å–Ω–æ)
4. –ñ–º—è–∫–∞—î—à –Ω–∞ —Ü—é –∫–Ω–æ–ø–∫—É —ñ —Ç–µ–±–µ –ø–µ—Ä–µ–∫–∏–¥–∞—î –≤ —Ä—è–¥–æ–∫ —â–æ–± —à–æ—Å—å –¥—Ä—É–∫—É–≤–∞—Ç–∏ –≤–∂–µ –∑ –≥–æ—Ç–æ–≤–∏–º —à–∞–±–ª–æ–Ω–æ–º.
 –ó–∞—Ä–∞–∑ —Ä–æ—Å–∫–∞–∂—É —è–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å —à–∞–±–ª–æ–Ω–æ–º.
 - –∑–∞–ø–∏—Å—É—î—à —Ä–µ–º–æ–Ω—Ç —á–∏ —Ç–æ –∫–ª—ñ—î–Ω—Ç—Å—å–∫–∏–π —á–∏ –Ω–∞—à —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
 - —Ñ–æ—Ä–º–∞ –∑–∞–ø–∏—Å—É –Ω–∞—Å—Ç—É–ø–Ω–∞ - "id2325 iphone 8Plus - –Ω–∏–∂–Ω—ñ–π —à–ª–µ–π—Ñ, –Ω–æ–≤–∞ –∞–∫–±, –ø–µ—Ä–µ–∫–ª–µ–π–∫–∞(–ø—Ä–æ–∫–ª–µ–π–∫–∞ 2, –∫–ª–µ–π –∞–∫–± 2)"
 - –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ "id\‚Ññ\#(–±–µ–∑ –ø—Ä–æ–±—ñ–ª–∞)2351515(—è–∫—â–æ –Ω–æ–º–µ—Ä—É –Ω–µ–º–∞ –ø–∏—à–µ—à –±—É–¥—å —à–æ)(–ø—Ä–æ–±—ñ–ª)iphone(–ø—Ä–æ–±—ñ–ª)8Plus(–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –º–æ–¥–µ–ª—å –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤, –≤–µ–ª–∏–∫–∞ —á–∏ –º–∞–ª–∞ –±—É–∫–≤–∞ —Ä—ñ–∑–Ω–∏—Ü—ñ –Ω–µ–º–∞)-(–¥–µ—Ñ—ñ—Å, –º–æ–∂–Ω–∞ –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤ –ø–æ –∫—Ä–∞—è—Ö –∞–ª–µ –∫—Ä–∞—â–µ –∑ –Ω–∏–º–∏)"
 - –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ –¥—Ä—É–≥–∞ –ø–æ–ª–æ–≤–∏–Ω–∞ "(—Ç—É—Ç –±—É–≤ –¥–µ—Ñ—ñ—Å) —à–æ –∑—Ä–æ–±–∏–≤,(—á–µ—Ä–µ–∑ –∫–æ–º—É –Ω–∞—Å—Ç—É–ø–Ω–µ —à–æ –∑—Ä–æ–±–∏–≤)". –î–∞–ª—ñ —Ç–∏ –ø–æ–±–∞—á–∏—à —à–æ —î —è–∫—ñ—Å—å –Ω–µ–ø–æ–Ω—è—Ç–Ω—ñ –¥—É–∂–∫–∏. –í –Ω–∏—Ö —Ç–∏ –º–æ–∂–µ—à –ø–∏—Å–∞—Ç–∏ –≤—Å–µ —Ç–µ —Å–∞–º–µ —â–æ —ñ –¥–æ –¥—É–∂–æ–∫ –∞–ª–µ –º–æ–∂–Ω–∞ –≤–∫–∞–∑—É–≤–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å, —ñ —Ç–∞–∫–æ–∂ —Ç—É—Ç –±–∞–∂–∞–Ω–æ –ø–∏—Å–∞—Ç–∏ –ø—Ä–æ–∫–ª–µ–π–∫–∏ —ñ –∫–ª–µ–π –ê–ö–ë.
 - —É –¥—É–∂–∫–∞—Ö –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∏—à–µ—à —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª —ñ –ø–æ—Ç—ñ–º —á–µ—Ä–µ–∑ –∫–æ–º—É –Ω–∞—Å—Ç—É–ø–Ω–µ.
 - –î–û –î–£–ñ–û–ö –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–µ –ø–∏—à–∏ –±–æ –∑–ª–∞–º–∞—î—Ç—å—Å—è))
 - —è–∫—â–æ –Ω–µ–º–∞ —à–æ –ø–∏—Å–∞—Ç–∏ –≤ –¥—É–∂–∫–∞—Ö —Ç–æ —ó—Ö –º–æ–∂–Ω–∞ –Ω–µ –ø–∏—Å–∞—Ç–∏
 - –Ω—ñ—è–∫–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤ –ø–∏—Å–∞—Ç–∏ –ø–µ—Ä–µ–¥ —Ä–µ–º–æ–Ω—Ç–æ–º –Ω–µ —Ç—Ä–µ–±–∞
 - –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç—ñ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö –ø–∏—à–µ—à —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ
 - —â–æ–± —Ä–æ–±–∏—Ç–∏ –ø–µ—Ä–µ–Ω–æ—Å –≤ —ñ–Ω—à–∏–π —Ä—è–¥–æ–∫ —Ç—Ä–µ–±–∞ –Ω–∞–∂–∏–º–∞—Ç–∏ CTRL + ENTER - —Ü–µ –≤–∞–∂–ª–∏–≤–æ!!!
 - –∫–æ–ª–∏ –≤—Å–µ –Ω–∞–ø–∏—Å–∞–≤ –Ω–∞–∂–∏–º–∞—à ENTER —ñ –≤–æ–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —ñ –∫–∞–∂–µ —à–æ —Ç—Ä–µ–±–∞ –∑—Ä–æ–±–∏—Ç–∏. –í—Å–µ –¥—É–∂–µ –ø—Ä–æ—Å—Ç–æ, —Å–ø—Ä–∞–≤–∏—à—Å—è –Ω–∞–≤—ñ—Ç—å —Ç–∏!
 - —Ä–æ–±–∏—Ç–∏ —Ü–µ –≤—Å–µ —â–æ –≤–æ–Ω–æ –ø—Ä–æ—Å–∏—Ç—å —Ç–∏ –º–æ–∂–µ—à —ñ –ø–æ—Ç—ñ–º, —Ü–µ –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ.
5. –ö–æ–ª–∏ —Ç—Ä–µ–±–∞ –¥–æ–ø–∏—Å–∞—Ç–∏ —â–µ —à–æ—Å—å —É WP, —Ä–æ–±–∏—à –ø—É–Ω–∫—Ç–∏ 1, 2, 3! –í—ñ–¥–∫—Ä–∏–≤–∞—î—Ç—å—Å—è –≤–∂–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —Ç–æ–±–æ—é —Ä–æ–±–æ—Ç–∞ —â–æ —Ç–∏ –¥–æ —Ü—å–æ–≥–æ –ø–∏—Å–∞–≤. 
   –ù—ñ–¥–µ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ –Ω–µ —Ç—Ä–µ–±–∞, –§–ª–µ—Ä–∫–µ–Ω –±—É–¥–µ –ø–∞–º—è—Ç–∞—Ç–∏, –∞ —Ç–∏ –±—É–¥–µ—à —Å–æ–±—ñ –ø—Ä–æ—Å—Ç–æ –¥–æ–ø–∏—Å—É–≤–∞—Ç–∏.
6. –í –∫—ñ–Ω—Ü—ñ –¥–Ω—è —á–∏ —Ç–∞–º –∫–æ–ª–∏ —Å–æ–±—ñ —Ö–æ—á–µ—à —Ç–∏ –≤–∏–∫–æ–Ω–∞—î—à —Ç–æ —â–æ –ø—Ä–æ—Å–∏—Ç—å –±–æ—Ç, —Å–∫–∏–¥–∞—î—à —â–µ —Ä–∞–∑ —Ç–æ–π —Å–∞–º–∏–π WP –Ω–∞–≤—ñ—Ç—å –Ω–µ –¥–æ–±–∞–≤–ª—è—é—á–∏ –Ω—ñ—á–æ–≥–æ —ñ –≤—ñ–Ω —Å–∫–∞–∂–µ —á–∏ –≤—Å–µ –∑—ñ–π—à–ª–æ—Å—å.
7. –Ø–∫—â–æ –≤—Å–µ –∑—ñ–π—à–ª–æ—Å—å —Ç–æ —Ç–æ–±—ñ –ø–æ–≤—ñ–¥–æ–º–∏—Ç—å –§–ª–µ—Ä–∫–µ–Ω —ñ –º–æ–∂–Ω–∞ –±—É–¥–µ –Ω–∞–∂–∞—Ç–∏ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É "–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏". –á—ó —Ç—Ä–µ–±–∞ —Ç–∏—Å–Ω—É—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ç–æ–¥—ñ –∫–æ–ª–∏ –π–¥–µ—à –¥–æ–¥–æ–º—É.
–ù–∞ —Ä–∞—Ö—É–Ω–æ–∫ —ñ–Ω—à–∏—Ö –∫–Ω–æ–ø–æ–∫:
1. "–û–±–Ω—É–ª–∏—Ç–∏ —Å–≤–æ—ó –¥–∞–Ω—ñ" - —Ç—É—Ç —Ç–∏ –º–æ–∂–µ—à —Å–∫–∏–Ω—É—Ç–∏ –≤—Å–µ —â–æ —Ç–∏ –Ω–∞–ø–∏—Å–∞–≤ —É WP. –ö–æ–ª–∏ –≤–∏–Ω–∏–∫–Ω–µ —Å–∏—Ç—É–∞—Ü—ñ—è —â–æ —Ç–∏ –Ω–∞–ø–∏—Å—É–≤ —è–∫—É—Å—å –¥—É—Ä–Ω—é, –∞ –≤–æ–Ω–∞ —Ç–æ—á–Ω–æ –≤–∏–Ω–∏–∫–Ω–µ —è —Ç–µ–±–µ –∑–Ω–∞—é, —Ç–∏ –º–æ–¥–µ –æ–Ω—É–ª–∏—Ç–∏ —Å–≤–æ—ó –¥–∞–Ω—ñ —ñ –Ω–∞–ø–∏—Å–∞—Ç–∏ –≤—Å–µ —â–µ —Ä–∞–∑.
2. "–†–µ—Å–µ—Ç –±–∞–∑–∏ —à–ª–∞–Ω–≥—ñ–≤" - —Ü–µ —Ç–∏ –∑–º–æ–∂–µ—à –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –∞–ª–µ –Ω—ñ—á–æ –Ω–µ —Å—Ç–∞–Ω–µ—Ç—å—Å—è, –±–æ —Ç–∏ —â–µ –º–∞–Ω—é–Ω—ñ–π, –º—É—Å—ñ–∫ –ø—É—Å—ñ–∫ —Ç–∞–∫–∏–π. –î–æ—Å—Ç—É–ø –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏ —î —Ç—ñ–ª—å–∫–∏ —É –º–µ–Ω–µ —ñ —É –í–∞–Ω—ñ. –ê–ª–µ —è–∫—â–æ —Ü—ñ–∫–∞–≤–æ —Ç–æ —Ü—è –∫–æ–º–∞–Ω–¥–∞ —á–∏—Å—Ç–∏—Ç—å –≤—Å—é –±–∞–∑—É –¥–∞–Ω–∏—Ö –≤–∑–∞–≥–∞–ª—ñ!
–ü–æ–≤–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –±—É–¥–µ –≤—ñ–¥–±—É–≤–∞—Ç–∏—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∫–æ–∂–µ–Ω –¥–µ–Ω—å –∑—Ä–∞–Ω–∫—É –æ "08:45"
3. "–ó–º—ñ–Ω–∞ —á–∞—Å—É –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –ø–æ–∑–∏—Ü—ñ–π" - —Ü–µ —è–∫—â–æ —Ç—Ä–µ–±–∞ –ø–æ–º—ñ–Ω—è—Ç–∏ —á–∞—Å –∫–æ–ª–∏ —Å–∫–∏–¥—É—î—Ç—å—Å—è —Ç–µ —á–æ–≥–æ –Ω–µ–º–∞. –ö–æ—Ä–æ—á–µ –Ω–µ –º–∞–≤ –∫—É–¥–∏ –∑–∞—Å—É–Ω—É—Ç–∏ —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é. –á—ó –Ω–µ –∫–ª–∞—Ü–∞–π.
"""
    return text

# print(open_read_me())

